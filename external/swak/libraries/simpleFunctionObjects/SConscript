# -*- mode: python -*-

import os
from build import build_lib
Import('env')

target = 'simpleFunctionObjects'

sources = Split("""
SolverInfo/SolverInfo.cpp
DataStructures/TimeClone/TimeClone.cpp
DataStructures/TimeClone/TimeCloneList.cpp
simpleFunctionObject/simpleFunctionObject.cpp
simpleDataFunctionObject/simpleDataFunctionObject.cpp
timelineFunctionObject/timelineFunctionObject.cpp
distributionFunctionObject/distributionFunctionObject.cpp
distributionFunctionObject/field/fieldDistributionFunctionObject.cpp
distributionFunctionObject/patchField/patchFieldDistributionFunctionObject.cpp
patch/patchFunctionObject/patchFunctionObject.cpp
patch/patchFieldFunctionObject/patchFieldFunctionObject.cpp
patch/patchAverageFunctionObject/patchAverageFunctionObject.cpp
patch/patchIntegrateFunctionObject/patchIntegrateFunctionObject.cpp
patch/patchMassFlowFunctionObject/patchMassFlowFunctionObject.cpp
patch/patchMassFlowAverageFunctionObject/patchMassFlowAverageFunctionObject.cpp
patch/patchFieldFlowFunctionObject/patchFieldFlowFunctionObject.cpp
volume/volumeAverageFunctionObject/volumeAverageFunctionObject.cpp
volume/volumeFieldFunctionObject/volumeFieldFunctionObject.cpp
volume/volumeIntegrateFunctionObject/volumeIntegrateFunctionObject.cpp
volume/volumeMinMaxFunctionObject/volumeMinMaxFunctionObject.cpp
misc/panicDump/panicDumpFunctionObject.cpp
misc/listRegisteredObjects/listRegisteredObjectsFunctionObject.cpp
misc/readGravitation/readGravitationFunctionObject.cpp
misc/readAndUpdateFields/readAndUpdateFields.cpp
misc/readAndUpdateFields/readAndUpdateFieldsFunctionObject.cpp
writeFields/writeAdditionalFields/writeAdditionalFieldsFunctionObject.cpp
writeFields/writeFieldsOften/writeFieldsOftenFunctionObject.cpp
writeFields/writeFieldsGeneral/writeFieldsGeneralFunctionObject.cpp
writeFields/conditionDrivenWriting/conditionDrivenWritingFunctionObject.cpp
writeFields/conditionDrivenWriting/writeIfFieldOutside/writeIfFieldOutsideFunctionObject.cpp
trackDictionary/trackDictionaryFunctionObject.cpp
functionObjectProxy/functionObjectListProxy/functionObjectListProxy.cpp
functionObjectProxy/conditionalFunctionObjectListProxy/conditionalFunctionObjectListProxy.cpp
functionObjectProxy/executeIfExecutableFitsFunctionObject/executeIfExecutableFitsFunctionObject.cpp
functionObjectProxy/executeIfObjectExistsFunctionObject/executeIfObjectExistsFunctionObject.cpp
functionObjectProxy/executeIfEnvironmentVariableFunctionObject/executeIfEnvironmentVariableFunctionObject.cpp
functionObjectProxy/executeIfFunctionObjectPresentFunctionObject/executeIfFunctionObjectPresentFunctionObject.cpp
functionObjectProxy/executeIfParallelSerialFunctionObject/executeIfParallelSerialFunctionObject.cpp
functionObjectProxy/executeIfStartTimeFunctionObject/executeIfStartTimeFunctionObject.cpp
functionObjectProxy/dynamicFunctionObjectListProxy/dynamicFunctionObjectListProxy.cpp
functionObjectProxy/dynamicFunctionObjectListProxy/providers/fromFileDictionaryProvider.cpp
functionObjectProxy/dynamicFunctionObjectListProxy/providers/stdoutFromCommandProvider.cpp
misc/writeAndEndFunctionObject/writeAndEndFunctionObject.cpp
misc/writeAndEndFieldRangeFunctionObject/writeAndEndFieldRangeFunctionObject.cpp
modelLoading/loadThermoModelFunctionObjects.cpp
modelLoading/loadIncompressibleTurbulenceModelFunctionObject.cpp
modelLoading/loadCompressibleTurbulenceModelFunctionObject.cpp
modelLoading/loadSLGThermoModelFunctionObject.cpp
timeManipulation/timeManipulationFunctionObject/timeManipulationFunctionObject.cpp
timeManipulation/setDeltaTByTimelineFunctionObject/setDeltaTByTimelineFunctionObject.cpp
initialization/initPotentialFlow/initPotentialFlowFunctionObject.cpp
update/updateSimple/updateSimpleFunctionObject.cpp
update/recalcPhi/recalcPhiFunctionObject.cpp
update/correctThermo/correctThermoFunctionObject.cpp
update/recalcThermoHe/recalcThermoHeFunctionObject.cpp
""")

caelus_inc = [
'sampling/lnInclude',
'thermophysicalModels/basic/lnInclude',
'thermophysicalModels/reactionThermo/lnInclude',
'thermophysicalModels/specie/lnInclude',
'thermophysicalModels/SLGThermo/lnInclude',
'thermophysicalModels/thermophysicalProperties/lnInclude',
'regionModels/regionModel/lnInclude',
'regionModels/surfaceFilmModels/lnInclude',
'turbulenceModels',
'transportModels',
'lagrangian/basic/lnInclude'
]

caelus_libs = [
'core',
'swakParsers',
'sampling',
'fluidThermophysicalModels',
'SLGThermo',
'incompressibleTransportModels',
'compressibleTurbulenceModel',
'incompressibleTurbulenceModel',
'specie',
'lagrangian'
]

append_args = {}
append_args = { 'CPPPATH' : [
                  os.path.join(env['SWAK_PATH'],'simpleFunctionObjects'),
                  os.path.join(env['SWAK_PATH'],'simpleFunctionObjects/lnInclude'),
                  os.path.join(env['SWAK_PATH'],'swakParsers/lnInclude')
               ]
            }

build_lib(env,
          target=target,
          sources=sources,
          caelus_inc=caelus_inc,
          caelus_libs=caelus_libs,
          append_args=append_args)
