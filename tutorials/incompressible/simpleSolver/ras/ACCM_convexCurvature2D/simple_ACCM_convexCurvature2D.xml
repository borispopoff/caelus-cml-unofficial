<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>SIMPLE ACCM_convexCurvature2D</name>

  <owner userid="ACCM"/>

  <tags>tut incompressible simple ras validation</tags>

  <problem_definition length="medium" nprocs="4">

    <command_line>caelus_tutorials --quiet -f run_validation.yaml</command_line>
    <clean_command_line>caelus_tutorials --quiet -f run_validation.yaml --clean</clean_command_line>
  </problem_definition>

  <variables>

    <variable name="run_completed" language="python" variable_list="completed">
from caelus.post.logs import SolverLog
clog = SolverLog(logfile="simpleSolver.log")
completed = clog.solve_completed
    </variable>

    <variable name="ref_time_residuals" language="python" variable_list="exec_time_ref,p_residual_ref,ux_residual_ref,uz_residual_ref,k_residual_ref,omega_residual_ref">
import pandas as pd
import os, caelus_test_tools
reference_path = caelus_test_tools.reference_path(project_dir, ref_path)
time = pd.read_table(os.path.join(reference_path,"logs/clock_time.dat"), comment='#', delim_whitespace=True)
ex_time = time[['Time', 'ExecutionTime']]
exec_time_ref = ex_time.iloc[-1][1]
p_ref = pd.read_table(os.path.join(reference_path,"logs/p.dat"), comment='#', delim_whitespace=True)
p_res_ref = p_ref[p_ref.SubIteration == 1][['Time', 'InitialResidual']]
p_residual_ref = p_res_ref.iloc[-1][1]
ux_ref = pd.read_table(os.path.join(reference_path,"logs/Ux.dat"), comment='#', delim_whitespace=True)
ux_res_ref = ux_ref[ux_ref.SubIteration == 1][['Time', 'InitialResidual']]
ux_residual_ref = ux_res_ref.iloc[-1][1]
uz_ref = pd.read_table(os.path.join(reference_path,"logs/Uz.dat"), comment='#', delim_whitespace=True)
uz_res_ref = uz_ref[uz_ref.SubIteration == 1][['Time', 'InitialResidual']]
uz_residual_ref = uz_res_ref.iloc[-1][1]
k_ref = pd.read_table(os.path.join(reference_path,"logs/k.dat"), comment='#', delim_whitespace=True)
k_res_ref = k_ref[k_ref.SubIteration == 1][['Time', 'InitialResidual']]
k_residual_ref = k_res_ref.iloc[-1][1]
omega_ref = pd.read_table(os.path.join(reference_path,"logs/omega.dat"), comment='#', delim_whitespace=True)
omega_res_ref = omega_ref[omega_ref.SubIteration == 1][['Time', 'InitialResidual']]
omega_residual_ref = omega_res_ref.iloc[-1][1]
    </variable>

    <variable name="time_residuals" language="python" variable_list="exec_time,p_residual,ux_residual,uz_residual,k_residual,omega_residual">
import pandas as pd
time = pd.read_table("logs/clock_time.dat", comment='#', delim_whitespace=True)
ex_time = time[['Time', 'ExecutionTime']]
exec_time = ex_time.iloc[-1][1]
p = pd.read_table("logs/p.dat", comment='#', delim_whitespace=True)
p_res = p[p.SubIteration == 1][['Time', 'InitialResidual']]
p_residual = p_res.iloc[-1][1]
ux = pd.read_table("logs/Ux.dat", comment='#', delim_whitespace=True)
ux_res = ux[ux.SubIteration == 1][['Time', 'InitialResidual']]
ux_residual = ux_res.iloc[-1][1]
uz = pd.read_table("logs/Uz.dat", comment='#', delim_whitespace=True)
uz_res = uz[uz.SubIteration == 1][['Time', 'InitialResidual']]
uz_residual = uz_res.iloc[-1][1]
k = pd.read_table("logs/k.dat", comment='#', delim_whitespace=True)
k_res = k[k.SubIteration == 1][['Time', 'InitialResidual']]
k_residual = k_res.iloc[-1][1]
omega = pd.read_table("logs/omega.dat", comment='#', delim_whitespace=True)
omega_res = omega[omega.SubIteration == 1][['Time', 'InitialResidual']]
omega_residual = omega_res.iloc[-1][1]

    </variable>

    <variable name="results" language="python" variable_list="p_range,u_range,p_diff_rms,u_diff_rms,k_range,omega_range">
import os, caelus_test_tools
reference_path = caelus_test_tools.reference_path(project_dir, ref_path)
p_range  = caelus_test_tools.compare_scalar_range("3000/p.gz", os.path.join(reference_path,"3000/p.gz"), 0.05)
u_range  = caelus_test_tools.compare_vector_norm_range("3000/U.gz", os.path.join(reference_path,"3000/U.gz"), 0.05)
p_diff_rms  = caelus_test_tools.compare_field_diff_rms("3000/p.gz", os.path.join(reference_path,"3000/p.gz"), 0.05)
u_diff_rms  = caelus_test_tools.compare_field_diff_rms("3000/U.gz", os.path.join(reference_path,"3000/U.gz"), 0.05)
k_range  = caelus_test_tools.compare_scalar_range("3000/k.gz", os.path.join(reference_path,"3000/k.gz"), 0.05)
omega_range  = caelus_test_tools.compare_scalar_range("3000/omega.gz", os.path.join(reference_path,"3000/omega.gz"), 0.05)
    </variable>
  </variables>

  <pass_tests>
    <test name="Completed" language="python">
assert(completed)
    </test>
    <test name="p residual" language="python">
assert(p_residual &lt;= 1.1*p_residual_ref)
    </test>
    <test name="Ux residual" language="python">
assert(ux_residual &lt;= 1.1*ux_residual_ref)
    </test>
    <test name="Uz residual" language="python">
assert(uz_residual &lt;= 1.1*uz_residual_ref)
    </test>
    <test name="k residual" language="python">
assert(k_residual &lt;= 1.1*k_residual_ref)
    </test>
    <test name="omega residual" language="python">
assert(omega_residual &lt;= 2*omega_residual_ref)
    </test>
    <test name="p range" language="python">
assert(p_range)
    </test>
    <test name="U range" language="python">
assert(u_range)
    </test>
    <test name="p field difference RMS" language="python">
assert(p_diff_rms)
    </test>
    <test name="U field difference RMS" language="python">
assert(u_diff_rms)
    </test>
    <test name="k range" language="python">
assert(k_range)
    </test>
    <test name="omega range" language="python">
assert(omega_range)
    </test>
  </pass_tests>

  <warn_tests>
    <test name="Higher execution time" language="python">
assert(exec_time &lt; 1.05*exec_time_ref)
    </test>
  </warn_tests>

</testproblem>
