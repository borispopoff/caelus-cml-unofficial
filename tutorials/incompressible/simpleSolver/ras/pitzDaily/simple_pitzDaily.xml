<?xml version="1.0" encoding="UTF-8" ?>

<testproblem>
  <name>SIMPLE pitzDaily</name>

  <owner userid="ACCM"/>

  <tags>tut incompressible simple ras</tags>

  <problem_definition length="short" nprocs="1">

    <command_line>caelus_tutorials --quiet -f run_tutorial.yaml</command_line>
    <clean_command_line>caelus_tutorials --quiet -f run_tutorial.yaml --clean</clean_command_line>
  </problem_definition>

  <variables>

    <variable name="run_completed" language="python" variable_list="completed">
from caelus.post.logs import SolverLog
clog = SolverLog(logfile="simpleSolver.log")
completed = clog.solve_completed
    </variable>

    <variable name="ref_time_residuals" language="python" variable_list="exec_time_ref,p_residual_ref,ux_residual_ref,uy_residual_ref,k_residual_ref,eps_residual_ref">
import pandas as pd
import os, caelus_test_tools
reference_path = caelus_test_tools.reference_path(project_dir, ref_path)
time = pd.read_table(os.path.join(reference_path,"logs/clock_time.dat"), comment='#', delim_whitespace=True)
ex_time = time[['Time', 'ExecutionTime']]
exec_time_ref = ex_time.iloc[-1][1]
p_ref = pd.read_table(os.path.join(reference_path,"logs/pCorr.dat"), comment='#', delim_whitespace=True)
p_res_ref = p_ref[p_ref.SubIteration == 1][['Time', 'InitialResidual']]
p_residual_ref = p_res_ref.iloc[-1][1]
ux_ref = pd.read_table(os.path.join(reference_path,"logs/Ux.dat"), comment='#', delim_whitespace=True)
ux_res_ref = ux_ref[ux_ref.SubIteration == 1][['Time', 'InitialResidual']]
ux_residual_ref = ux_res_ref.iloc[-1][1]
uy_ref = pd.read_table(os.path.join(reference_path,"logs/Uy.dat"), comment='#', delim_whitespace=True)
uy_res_ref = uy_ref[uy_ref.SubIteration == 1][['Time', 'InitialResidual']]
uy_residual_ref = uy_res_ref.iloc[-1][1]
k_ref = pd.read_table(os.path.join(reference_path,"logs/k.dat"), comment='#', delim_whitespace=True)
k_res_ref = k_ref[k_ref.SubIteration == 1][['Time', 'InitialResidual']]
k_residual_ref = k_res_ref.iloc[-1][1]
eps_ref = pd.read_table(os.path.join(reference_path,"logs/epsilon.dat"), comment='#', delim_whitespace=True)
eps_res_ref = eps_ref[eps_ref.SubIteration == 1][['Time', 'InitialResidual']]
eps_residual_ref = eps_res_ref.iloc[-1][1]
    </variable>

    <variable name="time_residuals" language="python" variable_list="exec_time,p_residual,ux_residual,uy_residual,k_residual,eps_residual">
import pandas as pd
time = pd.read_table("logs/clock_time.dat", comment='#', delim_whitespace=True)
ex_time = time[['Time', 'ExecutionTime']]
exec_time = ex_time.iloc[-1][1]
p = pd.read_table("logs/pCorr.dat", comment='#', delim_whitespace=True)
p_res = p[p.SubIteration == 1][['Time', 'InitialResidual']]
p_residual = p_res.iloc[-1][1]
ux = pd.read_table("logs/Ux.dat", comment='#', delim_whitespace=True)
ux_res = ux[ux.SubIteration == 1][['Time', 'InitialResidual']]
ux_residual = ux_res.iloc[-1][1]
uy = pd.read_table("logs/Uy.dat", comment='#', delim_whitespace=True)
uy_res = uy[uy.SubIteration == 1][['Time', 'InitialResidual']]
uy_residual = uy_res.iloc[-1][1]
k = pd.read_table("logs/k.dat", comment='#', delim_whitespace=True)
k_res = k[k.SubIteration == 1][['Time', 'InitialResidual']]
k_residual = k_res.iloc[-1][1]
eps = pd.read_table("logs/epsilon.dat", comment='#', delim_whitespace=True)
eps_res = eps[eps.SubIteration == 1][['Time', 'InitialResidual']]
eps_residual = eps_res.iloc[-1][1]

    </variable>

    <variable name="results" language="python" variable_list="p_range,u_range,p_diff_rms,u_diff_rms,k_range,eps_range">
import pandas as pd
import os, caelus_test_tools
reference_path = caelus_test_tools.reference_path(project_dir, ref_path)
time_ref = pd.read_table(os.path.join(reference_path,"logs/clock_time.dat"), comment='#', delim_whitespace=True)
ex_time = time_ref[['Time', 'ExecutionTime']]
iters_ref = int(ex_time.iloc[-1][0])
time = pd.read_table("logs/clock_time.dat", comment='#', delim_whitespace=True)
ex_time = time[['Time', 'ExecutionTime']]
iters = int(ex_time.iloc[-1][0])
p_range  = caelus_test_tools.compare_scalar_range(str(iters)+"/p.gz", os.path.join(reference_path,str(iters_ref)+"/p.gz"), 0.05)
u_range  = caelus_test_tools.compare_vector_norm_range(str(iters)+"/U.gz", os.path.join(reference_path,str(iters_ref)+"/U.gz"), 0.05)
p_diff_rms  = caelus_test_tools.compare_field_diff_rms(str(iters)+"/p.gz", os.path.join(reference_path,str(iters_ref)+"/p.gz"), 0.05)
u_diff_rms  = caelus_test_tools.compare_field_diff_rms(str(iters)+"/U.gz", os.path.join(reference_path,str(iters_ref)+"/U.gz"), 0.05)
k_range  = caelus_test_tools.compare_scalar_range(str(iters)+"/k.gz", os.path.join(reference_path,str(iters_ref)+"/k.gz"), 0.05)
eps_range  = caelus_test_tools.compare_scalar_range(str(iters)+"/epsilon.gz", os.path.join(reference_path,str(iters_ref)+"/epsilon.gz"), 0.05)
    </variable>
  </variables>

  <pass_tests>
    <test name="Completed" language="python">
assert(completed)
    </test>
    <test name="p residual" language="python">
assert(p_residual &lt;= 1.1*p_residual_ref)
    </test>
    <test name="Ux residual" language="python">
assert(ux_residual &lt;= 1.1*ux_residual_ref)
    </test>
    <test name="Uy residual" language="python">
assert(uy_residual &lt;= 1.1*uy_residual_ref)
    </test>
    <test name="k residual" language="python">
assert(k_residual &lt;= 1.1*k_residual_ref)
    </test>
    <test name="epsilon residual" language="python">
assert(eps_residual &lt;= 1.1*eps_residual_ref)
    </test>
    <test name="p range" language="python">
assert(p_range)
    </test>
    <test name="U range" language="python">
assert(u_range)
    </test>
    <test name="p field difference RMS" language="python">
assert(p_diff_rms)
    </test>
    <test name="U field difference RMS" language="python">
assert(u_diff_rms)
    </test>
    <test name="k range" language="python">
assert(k_range)
    </test>
    <test name="epsilon range" language="python">
assert(eps_range)
    </test>
  </pass_tests>

  <warn_tests>
    <test name="Higher execution time" language="python">
assert(exec_time &lt; 1.05*exec_time_ref)
    </test>
  </warn_tests>

</testproblem>
