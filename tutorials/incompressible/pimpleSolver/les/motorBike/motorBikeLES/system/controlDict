/*---------------------------------------------------------------------------*
Caelus 9.04
Web:   www.caelus-cml.com
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pisoSolver;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.05;

deltaT          1e-4;

writeControl    timeStep;

writeInterval   500;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression no;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;


functions
{
    // Make sure all fields for functionObjects are loaded. Prevents any
    // problems running with execFlowFunctionObjects.
    readFields
    {
        // Where to load it from (if not already in solver)
        functionObjectLibs ("libfieldFunctionObjects.so");

        type            readFields;
        fields          (p U);
    }

    cuttingPlane
    {
        type            surfaces;
        functionObjectLibs ("libsampling.so");
        writeControl    outputTime;

        surfaceFormat   vtk;
        fields          ( p U );

        interpolationScheme cellPoint;

        surfaces
        (
            yNormal
            {
                type            cuttingPlane;
                planeType       pointAndNormal;
                pointAndNormalDict
                {
                    basePoint       (0 0 0);
                    normalVector    (0 1 0);
                }
                interpolate     true;
            }
        );
    }

    streamLines
    {
        type            streamLine;

        // Output every
        writeControl   outputTime;
        // writeInterval 10;

        setFormat       vtk; //gnuplot; //xmgr; //raw; //jplot;

        // Velocity field to use for tracking.
        UName U;

        // Tracked forwards (+U) or backwards (-U)
        trackForward    true;

        // Names of fields to sample. Should contain above velocity field!
        fields (p U);

        // Steps particles can travel before being removed
        lifeTime        10000;

        // Number of steps per cell (estimate). Set to 1 to disable subcycling.
        nSubCycle 5;

        // Cloud name to use
        cloudName       particleTracks;

        // Seeding method. See the sampleSets in sampleDict.
        seedSampleSet   uniform;  //cloud;//triSurfaceMeshPointSet;

        uniformCoeffs
        {
            type        uniform;
            axis        x;  //distance;

            // Note: tracks slightly offset so as not to be on a face
            start       (-1.001 1e-7 0.0011);
            end         (-1.001 1e-7 1.0011);
            nPoints     20;
        }
    }

    forces
    {
        type        forceCoeffs;
        functionObjectLibs ( "libforces.so" );
        writeControl timeStep;
        writeInterval 1;

        patches     ( "motorBike.*" );
        pName       p;
        UName       U;
        rhoName     rhoInf;      // Indicates incompressible
        log         true;
        rhoInf      1;           // Redundant for incompressible
        liftDir     (0 0 1);
        dragDir     (1 0 0);
        CofR        (0.72 0 0);  // Axle midpoint on ground
        pitchAxis   (0 1 0);
        magUInf     20;
        lRef        1.42;        // Wheelbase length
        Aref        0.75;        // Estimated
    }
}
