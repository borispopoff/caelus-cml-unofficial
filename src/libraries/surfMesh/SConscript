# -*- mode: python -*-

import utils
from build import build_lib
Import('env')

# Build STL ASCII reader
ostype = utils.ostype()
_stl_path = 'surfaceFormats/stl/'
if ostype == "windows":
    src_from_flex = [_stl_path+'windows/STLsurfaceFormatASCII.cpp']
else:
    src = _stl_path+'STLsurfaceFormatASCII.ll'
    tgt = _stl_path+'posix/STLsurfaceFormatASCII.cpp'
    flex_env = env.Clone()
    flex_env.CXXFile(tgt, src, LEXFLAGS='-+')
    src_from_flex = [tgt]


target = 'surfMesh'

sources = Split("""
surfZone/surfZone/surfZone.cpp
surfZone/surfZone/surfZoneIOList.cpp
surfZone/surfZoneIdentifier/surfZoneIdentifier.cpp
MeshedSurfaceAllocator/MeshedSurfaceIOAllocator.cpp
MeshedSurface/MeshedSurfaceCore.cpp
MeshedSurface/MeshedSurfaces.cpp
UnsortedMeshedSurface/UnsortedMeshedSurfaces.cpp
MeshedSurfaceProxy/MeshedSurfaceProxyCore.cpp
surfaceRegistry/surfaceRegistry.cpp
surfMesh/surfMesh.cpp
surfMesh/surfMeshClear.cpp
surfMesh/surfMeshIO.cpp
surfFields/surfFields/surfFields.cpp
surfFields/surfPointFields/surfPointFields.cpp
surfaceFormats/surfaceFormatsCore.cpp
surfaceFormats/ac3d/AC3DsurfaceFormatCore.cpp
surfaceFormats/ac3d/AC3DsurfaceFormatRunTime.cpp
surfaceFormats/ftr/FTRsurfaceFormatRunTime.cpp
surfaceFormats/gts/GTSsurfaceFormatRunTime.cpp
surfaceFormats/nas/NASsurfaceFormatRunTime.cpp
surfaceFormats/obj/OBJsurfaceFormatRunTime.cpp
surfaceFormats/off/OFFsurfaceFormatRunTime.cpp
surfaceFormats/cas/CASsurfaceFormatCore.cpp
surfaceFormats/cas/CASsurfaceFormatRunTime.cpp
surfaceFormats/smesh/SMESHsurfaceFormatRunTime.cpp
surfaceFormats/starcd/STARCDsurfaceFormatCore.cpp
surfaceFormats/starcd/STARCDsurfaceFormatRunTime.cpp
surfaceFormats/stl/STLsurfaceFormatCore.cpp
surfaceFormats/stl/STLsurfaceFormatRunTime.cpp
surfaceFormats/tri/TRIsurfaceFormatCore.cpp
surfaceFormats/tri/TRIsurfaceFormatRunTime.cpp
surfaceFormats/vtk/VTKsurfaceFormatCore.cpp
surfaceFormats/vtk/VTKsurfaceFormatRunTime.cpp
surfaceFormats/wrl/WRLsurfaceFormatCore.cpp
surfaceFormats/wrl/WRLsurfaceFormatRunTime.cpp
surfaceFormats/x3d/X3DsurfaceFormatCore.cpp
surfaceFormats/x3d/X3DsurfaceFormatRunTime.cpp
""") + src_from_flex

caelus_inc = []

caelus_libs = [
'core'
]

build_lib(env,
          target=target,
          sources=sources,
          caelus_inc=caelus_inc,
          caelus_libs=caelus_libs)
