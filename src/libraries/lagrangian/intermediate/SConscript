# -*- mode: python -*-

from build import build_lib
Import('env')

target = 'lagrangianIntermediate'

sources = Split("""
clouds/baseClasses/kinematicCloud/kinematicCloud.cpp
clouds/baseClasses/thermoCloud/thermoCloud.cpp
clouds/baseClasses/reactingCloud/reactingCloud.cpp
clouds/baseClasses/reactingMultiphaseCloud/reactingMultiphaseCloud.cpp
parcels/derived/basicKinematicParcel/defineBasicKinematicParcel.cpp
parcels/derived/basicKinematicParcel/makeBasicKinematicParcelSubmodels.cpp
parcels/derived/basicKinematicCollidingParcel/defineBasicKinematicCollidingParcel.cpp
parcels/derived/basicKinematicCollidingParcel/makeBasicKinematicCollidingParcelSubmodels.cpp
parcels/derived/basicThermoParcel/defineBasicThermoParcel.cpp
parcels/derived/basicThermoParcel/makeBasicThermoParcelSubmodels.cpp
parcels/derived/basicReactingParcel/defineBasicReactingParcel.cpp
parcels/derived/basicReactingParcel/makeBasicReactingParcelSubmodels.cpp
parcels/derived/basicReactingMultiphaseParcel/defineBasicReactingMultiphaseParcel.cpp
parcels/derived/basicReactingMultiphaseParcel/makeBasicReactingMultiphaseParcelSubmodels.cpp
submodels/addOns/radiation/absorptionEmission/cloudAbsorptionEmission/cloudAbsorptionEmission.cpp
submodels/addOns/radiation/scatter/cloudScatter/cloudScatter.cpp
submodels/Kinematic/PatchInteractionModel/LocalInteraction/patchInteractionData.cpp
submodels/Kinematic/PatchInteractionModel/LocalInteraction/patchInteractionDataList.cpp
submodels/Kinematic/InjectionModel/KinematicLookupTableInjection/kinematicParcelInjectionData.cpp
submodels/Kinematic/InjectionModel/KinematicLookupTableInjection/kinematicParcelInjectionDataIO.cpp
submodels/Kinematic/InjectionModel/KinematicLookupTableInjection/kinematicParcelInjectionDataIOList.cpp
submodels/Kinematic/InjectionModel/PatchInjection/patchInjectionBase.cpp
submodels/Thermodynamic/InjectionModel/ThermoLookupTableInjection/thermoParcelInjectionData.cpp
submodels/Thermodynamic/InjectionModel/ThermoLookupTableInjection/thermoParcelInjectionDataIO.cpp
submodels/Thermodynamic/InjectionModel/ThermoLookupTableInjection/thermoParcelInjectionDataIOList.cpp
submodels/Reacting/InjectionModel/ReactingLookupTableInjection/reactingParcelInjectionData.cpp
submodels/Reacting/InjectionModel/ReactingLookupTableInjection/reactingParcelInjectionDataIO.cpp
submodels/Reacting/InjectionModel/ReactingLookupTableInjection/reactingParcelInjectionDataIOList.cpp
submodels/ReactingMultiphase/InjectionModel/ReactingMultiphaseLookupTableInjection/reactingMultiphaseParcelInjectionData.cpp
submodels/ReactingMultiphase/InjectionModel/ReactingMultiphaseLookupTableInjection/reactingMultiphaseParcelInjectionDataIO.cpp
submodels/ReactingMultiphase/InjectionModel/ReactingMultiphaseLookupTableInjection/reactingMultiphaseParcelInjectionDataIOList.cpp
integrationScheme/integrationScheme/integrationScheme.cpp
integrationScheme/integrationScheme/integrationSchemeNew.cpp
integrationScheme/Euler/Euler.cpp
integrationScheme/analytical/analytical.cpp
phaseProperties/phaseProperties/phaseProperties.cpp
phaseProperties/phaseProperties/phasePropertiesIO.cpp
phaseProperties/phasePropertiesList/phasePropertiesList.cpp
clouds/Templates/KinematicCloud/cloudSolution/cloudSolution.cpp
""")

caelus_inc = [
'sampling/lnInclude',
'dynamicFvMesh/lnInclude',
'lagrangian/basic/lnInclude',
'lagrangian/distributionModels/lnInclude',
'lagrangian/turbulence/lnInclude',
'turbulenceModels',
'turbulenceModels/incompressible/LES/lnInclude',
'turbulenceModels/LES/LESdeltas/lnInclude',
'transportModels',
'regionModels/regionModel/lnInclude',
'regionModels/surfaceFilmModels/lnInclude',
'thermophysicalModels/specie/lnInclude',
'thermophysicalModels/specie/lnInclude',
'thermophysicalModels/basic/lnInclude',
'thermophysicalModels/reactionThermo/lnInclude',
'thermophysicalModels/SLGThermo/lnInclude',
'thermophysicalModels/radiation/lnInclude',
'thermophysicalModels/thermophysicalProperties/lnInclude'
]

caelus_libs = [
'core',
'lagrangian',
'distributionModels',
'specie',
'fluidThermophysicalModels',
'thermophysicalProperties',
'reactionThermophysicalModels',
'SLGThermo',
'radiationModels',
'incompressibleTurbulenceModel',
'incompressibleRASModels',
'incompressibleLESModels',
'compressibleTurbulenceModel',
'compressibleRASModels',
'compressibleLESModels',
'LESdeltas',
'incompressibleTransportModels',
'regionModels',
'surfaceFilmModels',
'dynamicFvMesh',
'sampling'
]

build_lib(env,
          target=target,
          sources=sources,
          caelus_inc=caelus_inc,
          caelus_libs=caelus_libs)
