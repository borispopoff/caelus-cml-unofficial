Spherical Cavity 
----------------

In this tutorial, we look at simulating buoyant flow inside a spherically heated cavity using Caelus |version| which will be a three-dimension case. Because of the natural convection process, the fluid initiates a motion due to buoyancy effects. This results in steady isotherms which is of interest in this tutorial and will be compared with the analytical data.

Objectives
````````````
With this tutorial, the user would be familiar in setting up a steady-state Caelus simulation for laminar, buoyant flow within a spherically heated cavity. The steps that would be performed in this tutorial are as follows

* Background
	- A brief description about the problem
	- Geometry and freestream details

* Grid generation
	- Computational domain and boundary details
	- Computational grid generation
	- Exporting grid to Caelus

* Problem definition
	- Directory structure
	- Setting up boundary conditions, physical properties and control/solver attributes

* Execution of the solver
	- Monitoring the convergence
	- Writing the log files
	
* Results
	- Showing the flow structure inside the cavity

Pre-requisites 
````````````````

It is assumed that the user is familiar with the Linux command line environment using a terminal or Caelus-console (for Windows OS) and that Caelus is installed correctly with appropriate environment variables set. The grid used here is generated using `Pointwise <http://www.pointwise.com/>`_ and the user is free to use their choice of grid generation tool having exporting capabilities to the Caelus grid format.

Background
````````````

The flow inside a spherically heated cavity is an interesting case of buoyant flow simulation. Here, the flow is enclosed in a spherical cavity and the wall is heated with a specified temperature gradient. Due to the natural convection process, the fluid initiates a motion as a result of buoyancy effects. The characteristic feature that is of interest is the steady isotherms. Details regarding the validation of this case is given in :ref:`spherical-cavity-validation`.

The schematic representation of the sphere is shown in :numref:`sphereschematictutorials` and only half of the sphere is considered here having the plane of symmetry in #:math:`x-y` plane at :math:`z=0`. The radius of the sphere is chosen to be :math:`r=0.5~m`, such that :math:`x=0` at :math:`r=0` and :math:`x=0.5` at :math:`r=0.5`.

.. _sphereschematictutorials:
.. figure:: sections/tutorial-figures/sphere-schematic-tutorials.*
   :width: 300px
   :align: center
  
   Schematic of a sphere

The thermal boundary condition to the spherical wall was generated by specifying temperature (:math:`T`) as a function of distance (:math:`x`), which are as follows:

.. math::
   
   T = x

with this, 

.. math::
   
   T = -0.5~K \quad \text{at} \quad x = -0.5~m
   
.. math::

   T = 0.5~K \quad \text{at} \quad x = 0.5~m

To obtain a smooth distribution of temperature, sufficient cells in the radial direction is required. For buoyancy driven flows, the non-dimensional number,  Rayleigh number (:math:`Ra`) is often used which relates buoyancy and viscous effects of the flow. In this case, we will be simulating with a (:math:`Ra`) number of 2000 and a Prandtl number of 0.7.

The below table summarises the flow conditions that will be used

.. table:: Freestream conditions

   +----------------+----------------+----------------+-----------------------+-----------------------------+-----------------------------+
   | :math:`Ra`     | :math:`Pr`     | :math:`T~(K)`  | :math:`p~(m^2/s^2)`   | :math:`\nu~(m^2/s)`         | :math:`\beta~(1/K)`         |
   +================+================+================+=======================+=============================+=============================+
   | :math:`2000`   | :math:`0.7`    | :math:`T = x`  | :math:`(0)` Gauge     | :math:`3.4 \times 10^{-4}`  | :math:`3.567\times10^{-5}`  |
   +----------------+----------------+----------------+-----------------------+-----------------------------+-----------------------------+

Grid Generation
````````````````

A hexahedral grid within the sphere was developed via the O-grid topology using `Pointwise <http://www.pointwise.com/>`_. Grid generation details are not discussed here, however details regarding the computational domain and boundary conditions are provided.

As noted earlier, the computational domain considered is a half sphere with the plane of symmetry in the :math:`x-y` axes at :math:`z=0~m`. The temperature will be set as given in the above equations and also the initialisation follows the surface temperature (:math:`T=x`). In :numref:`sphere-domain-tutorials` the computational domain, in particular the applied temperature boundary condition when applied is shown.


.. _sphere-domain-tutorials:
.. figure:: sections/tutorial-figures/sphere-domain-tutorials.*
   :width: 400px
   :align: center
		
   Computational domain and temperature boundary condition for a spherical cavity

The structured O-grid over the spherical wall and on the plane of symmetry is shown in :numref:`sphere-grid-tutorials`. A total of 18564 cells are present within the domain. Over the plane of symmetry, 32 cells are distributed and, over the spherical surface 35 cells are distributed in the radial direction.


.. _sphere-grid-tutorials:
.. figure:: sections/tutorial-figures/sphere-grid-tutorials.*
   :width: 600px
   :align: center

   O-grid representation distribution on the wall and on the plane of symmetry

Problem definition
````````````````````

We begin with instructions to set-up the spherical cavity case and the required configuration files that are needed. A full working case is found in the following directory:

.. code-block:: bash

   /tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/

However,the user is free to start the case setup from scratch consistent with the directory stucture discussed below. 


**Directory Structure**

.. Note::
   All commands shown here are entered in a terminal window, unless otherwise mentioned

In order to set-up the problem, Caelus requires a ``time``, ``constant`` and ``system`` sub-directories. Since we will be starting the simulation at time :math:`t = 0~s`, the ``time`` directory would be just ``0``. 

In the ``0`` sub-directory, few additional files ``p``, ``p_rgh``, ``alphat``, ``T``, and ``U`` for pressure,  buoyant pressure, turbulent thermal conductivity, temperature and velocity are set respectively. Note that even for a laminar simulation, ``alphat`` is required, although a value of ``0`` would be used. The contents of these files set the dimensions, initialisation and boundary conditions to the case. 
		

The user should be aware that Caelus is case sensitive and therefore the setting up of the directories, files and contents (when applicable) should be identical.

**Boundary Conditions and Solver Attributes**

*Boundary Conditions*

The boundary conditions would be set as follows

* Wall
	- Velocity: Fixed uniform velocity :math:`u, v, w = 0`
	- Pressure: Uniform zero Buoyant Pressure
	- Temperature: Temperature as a function of :math:`x` (:math:`T = x`)
	- Turbulent thermal conductivity: Fixed uniform value of `0`

* Symmetry Plane
    - Velocity: Symmetry
    - Pressure: Symmetry
    - Temperature: Symmetry
    - Turbulent thermal conductivity: Symmetry
	
* Initialisation
    - Velocity: Fixed uniform velocity :math:`u, v, w = 0`
    - Pressure: Uniform zero Buoyant Pressure
    - Temperature: Temperature as a function of :math:`x` (:math:`T = x`)
    - Turbulent thermal conductivity: A value of `0`

Note that to specify a temperature as a function of :math:`x`, `swak4Foam <http://openfoamwiki.net/index.php/Contrib/swak4Foam/>`_ library was used and ``funkySetFields`` utility was employed. The usage of this would be shown later.

The first quantity to define would be the pressure (:math:`p`) and this is done in the file ``p``, which has the following contents.

.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/0/p
    

The above file begins with a dictionary named ``FoamFile`` containing standard set of keywords such as version, format, location, class and object names. The principle elements follows next

* ``dimension``
	- is used to specify the physical dimensions of the pressure field. Here, pressure is defined in terms of kinematic pressure with the units (:math:`m^2/s^2`) written as  ``[0 2 -2 0 0 0 0]``

* ``internalField``
	- is used to specify the initial conditions. It can be either uniform or non-uniform. Since we have a 0 initial uniform gauge pressure, the entry is ``uniform 0;``

* ``boundaryField``
	- is used to specify the boundary conditions. In this case its the boundary conditions for pressure at all the boundary patches.

Similarly, the input data for the buoyant pressure is shown below

.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/0/p_rgh
    

In the next file, ``alphat`` is defined as follows.

.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/0/alphat
    

For the temperature, before the ``funkySetFields`` expression is used, we need to have the ``T`` file with the generic boundary conditions. This is because when  ``funkySetFields`` is applied, the ``T`` file would be overwritten with the profile values.

    
The final file in this directory is the velocity and the contents are as follows.


.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/0/U
    

As noted above, the principle entries for the velocity filed are self explanatory with the typical dimensional units of :math:`m/s` (``[0 1 -1 0 0 0 0]``). The initialisation of the flow is done at :math:`0~m/s` which is set using ``internalField`` to ``uniform (0 0 0);`` which represents three components of velocity.

The boundary conditions (``symm``, ``wall-1``, ``wall-2``, etc) specified in the above files should be the grid boundary patches (surfaces) that are generated by the grid-generation tool. The user should ensure that their names are identically matched.

*Grid file and Physical Properties*

The spherical cavity grid is placed in ``constant/polyMesh`` sub-directory. Additionally, physical properties are specified in separate files, placed in the ``constant`` sub-directory. 

The first file is ``g``,wherein the value of acceleration due to gravity is specified. Since we are simulating a buoyancy driven flow, gravity effects should be considered. The contents of ``g`` are as follows

.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/constant/g
    

In the next file ``transportProperties``, details about the transport model for viscosity, Prandtl number, coefficient of thermal expansion are specified. The contents are as follows

.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/constant/transportProperties
    

Here, ``Newtonian;`` keyword is used since the flow is under Newtonian assumption and a kinematic viscosity (:math:`nu`) with the units :math:`m^2/s` (``[0 2 -1 0 0 0 0]``) is specified. Similarly, the value of ``beta``, ``TRef``, ``Pr`` and ``Prt`` are specified. Note that a value of 0.7 is used for laminar Prandtl number.

The type of simulation is specified in ``turbulenceProperties`` to ``laminar`` using the keyword ``simulationType`` as shown below

.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/constant/turbulenceProperties
 

In addition to this, ``RASProperties`` file is required since we specify turbulent thermal conductivity property.    

.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/constant/RASProperties

*Controls and Solver Attributes*

Here we set-up the necessary files to control the simulation and specifying the solver attributes such as discretization method, linear solver setting, etc and these reside in the ``system`` directory.

First, there is the ``controlDict`` file with the following information


.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/system/controlDict
    

As we will be using ``funkySetFields``, few relevant libraries are needed and they are imported by using the following lines in the ``controlDict``.

.. code-block:: bash
	
   libs 
   (
   "libsimpleSwakFunctionObjects.so"
   "libswakFunctionObjects.so"
   "libgroovyBC.so"
   );

The next is the application, ``buoyantBoussinesqSimpleSolver`` which is the buoyancy version of the ``SIMPLE`` solver that will be used in this simulation. As we begin the simulation at :math:`t = 0~s`, we need the boundary condition files to be present in the ``0`` directory, which has been formerly done. The keywords, ``startTime`` to ``startTime`` is used, where ``startTime`` is set to a value ``0``. The flow is simulated for a total of 2000 iterations and is specified through ``stopAt`` and ``endTime``. This is followed by setting the time interval of ``10`` iterations to save the results via ``writeControl`` and ``writeInterval`` keywords.

The schemes for finite volume discretization are specified through ``fvSchemes`` file with the contents as follows


.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/system/fvSchemes
    

In the above file, the discretization schemes are set for time-derivative, gradient, divergence and Laplacian terms.

The final file is the ``fvSolution``, where linear solver settings are provided and is as given below


.. literalinclude:: ../../../tutorials/heatTransfer/buoyantBoussinesqSimpleSolver/laminar/ACCM_sphericalCavity/system/fvSolution
    

The above file details the different linear solvers that are used to solve for buoyant pressure and velocity fields. Further, ``nNonOrthogonalCorrectors`` is set to ``2;`` since there is some degree of non-orthogonality present in the grid.

With these, the set-up of the relevant directories and files are completed. Let us view the directory structure to ensure all are present. The tree should be identical to the one shown below

.. code-block:: bash

   tree
   .
   ├── 0
   │   ├── alphat
   │   ├── p
   │   ├── p_rgh
   │   ├── T
   │   └── U
   ├── constant
   │   ├── polyMesh
   │   │   ├── boundary
   │   │   ├── faces
   │   │   ├── neighbour
   │   │   ├── owner
   │   │   └── points
   │   ├── RASProperties
   │   ├── transportProperties
   │   └── turbulenceProperties
   └── system
       ├── controlDict
       ├── fvSchemes
       └── fvSolution

 

Execution of the solver
````````````````````````

Before the solver can be executed, we have to apply the temperature profile as noted earlier. This step can be performed as follows

.. code-block:: bash
	
   funkySetFields -field T -expression "pos().x" -time 0 -keepPatches -valuePatches "wall-1 wall-2"

The above expression re-writes the ``T`` file with the appropriate values of temperature as a function of distance :math:`x`. Following this, the solver can be executed and it involves few different steps. The first of which is to renumber the grid or mesh followed by checking the mesh quality. Renumbering reduces the matrix bandwidth while quality check shows the mesh statistics. These can be performed as follows


.. code-block:: bash

   caelus run -- renumberMesh -overwrite
   caelus run -- checkMesh

During the process of renumbering, grid-cell bandwidth information before and after ``renumberMesh`` is shown and the user can take a note of this. The mesh statistics are as shown below after invoking ``checkMesh``

.. literalinclude:: sections/tutorial-figures/sc_checkmesh.txt

The above information gives a maximum mesh non-orthogonality angle of 64.2 and therefore non-orthogonal corrections are needed for the solver. In the next step, we will execute the solver and monitor the progress of the simulation. The solver should be executed from the top level directory using,

.. code-block:: bash

   caelus run -l my-spherical-cavity.log buoyantBoussinesqSimpleSolver 

The progress of the simulation is written to the log file ``my-spherical-cavity.log``, which can be monitored to view the convergence history. In a separate terminal window use

.. code-block:: bash
	
   caelus logs -w my-spherical-cavity.log

		
The plot indicates the convergence history for pressure with respect to time and a similar plot is shown in :numref:`sphere-convergence-tutorials`. The convergence of other properties can also be found by using the above command.

.. _sphere-convergence-tutorials:
.. figure:: sections/tutorial-figures/sphere-convergence-tutorials.*
   :width: 500px
   :align: center
		
   Convergence of pressure with respect to time


Results
````````

Here, the solution obtained at steady state is shown and is compared with the analytical solution. In :numref:`sphere-isotherms-tutorials`, the comparison of temperature isotherms is presented. The analytical solution is a first order approximation. A close agreement between the two can be observed.


.. _sphere-isotherms-tutorials:
.. figure:: sections/tutorial-figures/sphere-isotherms-tutorials.*
   :width: 600px 
   :align: center
		
   Comparison of temperature isotherms between computational and analytical solutions.

















































